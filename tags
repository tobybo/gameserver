!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIN	app/makefile	/^BIN = gameserver$/;"	m
BIN	common.mk	/^BIN := $(addprefix $(BUILD_ROOT)\/,$(BIN))$/;"	m
BIN	tools/makefile	/^BIN = $/;"	m
BUILD_DIR	config.mk	/^BUILD_DIR = $(BUILD_ROOT)\/tools \\$/;"	m
BUILD_ROOT	config.mk	/^export BUILD_ROOT = $(shell pwd)$/;"	m
CConfig	app/config.cpp	/^CConfig::CConfig(){$/;"	f	class:CConfig
CConfig	include/config.h	/^class CConfig$/;"	c
CConfigDelete	include/config.h	/^        class CConfigDelete$/;"	c	class:CConfig
DEBUG	config.mk	/^export DEBUG = true$/;"	m
DEPS	common.mk	/^DEPS := $(addprefix $(DEP_DIR)\/,$(DEPS))$/;"	m
DEPS	common.mk	/^DEPS = $(SRCS:.cpp=.d)$/;"	m
DEP_DIR	common.mk	/^DEP_DIR = $(BUILD_ROOT)\/app\/dep$/;"	m
INCLUDE_PATH	config.mk	/^export INCLUDE_PATH = $(BUILD_ROOT)\/include$/;"	m
LINK_OBJ	common.mk	/^LINK_OBJ = $(wildcard $(LINK_OBJ_DIR)\/*.o)$/;"	m
LINK_OBJ_DIR	common.mk	/^LINK_OBJ_DIR = $(BUILD_ROOT)\/app\/link_obj$/;"	m
OBJS	common.mk	/^OBJS := $(addprefix $(LINK_OBJ_DIR)\/,$(OBJS))$/;"	m
OBJS	common.mk	/^OBJS = $(SRCS:.cpp=.o)$/;"	m
SConfInfo	include/config.h	/^}SConfInfo,*SConfiInfoPtr;$/;"	t	typeref:struct:__anon1
SConfiInfoPtr	include/config.h	/^}SConfInfo,*SConfiInfoPtr;$/;"	t	typeref:struct:__anon1
SRCS	common.mk	/^SRCS = $(wildcard *.cpp)$/;"	m
VERSION	common.mk	/^VERSION = debug$/;"	m
VERSION	common.mk	/^VERSION = release$/;"	m
_CONFIG_H_	include/config.h	2;"	d
_NGX_FUNS_H_	include/ngx_funs.h	2;"	d
cc	common.mk	/^cc = g++ -std=c++11 -g$/;"	m
cc	common.mk	/^cc = g++ -std=c++11$/;"	m
content	include/config.h	/^    string content;$/;"	m	struct:__anon1
getInstance	include/config.h	/^        static CConfig* getInstance(){$/;"	f	class:CConfig
getIntContent	app/config.cpp	/^const int CConfig::getIntContent(const string& name) const{$/;"	f	class:CConfig
getStrContent	app/config.cpp	/^const string CConfig::getStrContent(const string& name) const{$/;"	f	class:CConfig
loadConfig	app/config.cpp	/^bool CConfig::loadConfig(const string& filename){$/;"	f	class:CConfig
m_info	include/config.h	/^        std::vector<SConfiInfoPtr> m_info;$/;"	m	class:CConfig
m_instance	include/config.h	/^        static CConfig* m_instance;$/;"	m	class:CConfig
main	app/gameserver.cpp	/^int main(int argc,char* const* argv){$/;"	f
name	include/config.h	/^    string name;$/;"	m	struct:__anon1
testDefFun	tools/dealstr.cpp	/^void testDefFun(){$/;"	f
trimStrLeft	tools/dealstr.cpp	/^char* trimStrLeft(char* s,int len,const char c){$/;"	f
trimStrRight	tools/dealstr.cpp	/^void trimStrRight(char* s,int len,const char c){$/;"	f
~CConfig	app/config.cpp	/^CConfig::~CConfig(){$/;"	f	class:CConfig
~CConfigDelete	include/config.h	/^            ~CConfigDelete(){$/;"	f	class:CConfig::CConfigDelete
